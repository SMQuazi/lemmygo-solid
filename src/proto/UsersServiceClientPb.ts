/**
 * @fileoverview gRPC-Web generated client stub for
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.4
// source: users.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from "grpc-web";

import * as users_pb from "./users_pb";

export class UsersClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(
    hostname: string,
    credentials?: null | { [index: string]: string },
    options?: null | { [index: string]: any }
  ) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "text";

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    "/Users/Login",
    grpcWeb.MethodType.UNARY,
    users_pb.LoginRequest,
    users_pb.LoginResponse,
    (request: users_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    users_pb.LoginResponse.deserializeBinary
  );

  login(
    request: users_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null
  ): Promise<users_pb.LoginResponse>;

  login(
    request: users_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: users_pb.LoginResponse) => void
  ): grpcWeb.ClientReadableStream<users_pb.LoginResponse>;

  login(
    request: users_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: users_pb.LoginResponse) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/Users/Login",
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/Users/Login",
      request,
      metadata || {},
      this.methodDescriptorLogin
    );
  }

  methodDescriptorRegister = new grpcWeb.MethodDescriptor(
    "/Users/Register",
    grpcWeb.MethodType.UNARY,
    users_pb.RegistrationRequest,
    users_pb.RegistrationResponse,
    (request: users_pb.RegistrationRequest) => {
      return request.serializeBinary();
    },
    users_pb.RegistrationResponse.deserializeBinary
  );

  register(
    request: users_pb.RegistrationRequest,
    metadata: grpcWeb.Metadata | null
  ): Promise<users_pb.RegistrationResponse>;

  register(
    request: users_pb.RegistrationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: users_pb.RegistrationResponse
    ) => void
  ): grpcWeb.ClientReadableStream<users_pb.RegistrationResponse>;

  register(
    request: users_pb.RegistrationRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: users_pb.RegistrationResponse
    ) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/Users/Register",
        request,
        metadata || {},
        this.methodDescriptorRegister,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/Users/Register",
      request,
      metadata || {},
      this.methodDescriptorRegister
    );
  }
}
